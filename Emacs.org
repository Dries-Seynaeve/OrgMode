#+TITLE: Emacs from Scratch configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

#+begin_src emacs-lisp
  ;; Define a variable that sets the font size for the system
  (defvar d13353/default-font-size 140)
  (defvar d13353/default-variable-font-size 140)
#+end_src

#+RESULTS:
: d13353/default-variable-font-size

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Bootstrap 'use-package' 
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

#+RESULTS:
: t


* Basic UI Configuration

#+begin_src emacs-lisp

     (setq inhibit-startup-message t)

     (scroll-bar-mode -1)     ; Disable visible scrollbar
     (tool-bar-mode -1)       ; Disabel the toolbar
     (tooltip-mode -1)        ; Disabel tooltips
     (set-fringe-mode 10)     ; Give some breathing room

     (menu-bar-mode -1)    ; Disable the menu bar
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Set up the visible bell
     (setq visible-bell t)

     (column-number-mode)
     (global-display-line-numbers-mode t)

     ;; Disable line numbers for some modes
     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

#+RESULTS:


** Font configuration
#+begin_src emacs-lisp 

  (set-face-attribute 'default nil :font "Fira Code Retina" :height d13353/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height d13353/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height d13353/default-font-size :weight 'regular)

#+end_src

#+RESULTS:



* UI Configuration

** Color Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

#+RESULTS:

** Better modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))

#+end_src

#+RESULTS:

** Try

#+begin_src emacs-lisp

  (use-package try
	       :ensure t)

#+end_src
   
** Which Key

#+begin_src emacs-lisp

    (use-package which-key
       :ensure t
       :config
       (which-key-mode))

#+end_src

#+RESULTS:
: t

** Ivy - Counsel - Swiper

#+begin_src emacs-lisp

  ;; We need to to have counsil in order to for swiper to work
  (use-package counsel
    :ensure t
    :bind (:map minibuffer-local-map
                ("C-r" . 'counsel-minibuffer-history)))

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key (kbd "C-s") 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "C-x b") 'counsel-ibuffer)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

  ;; Ivy Rich
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

#+RESULTS:

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

#+RESULTS:
: helpful-key

** Ibuffer
#+begin_src emacs-lisp

  (defalias 'list-buffers 'ibuffer)

#+end_src

** Ace Window
#+begin_src emacs-lisp

  ;; set up ace-window
  (use-package ace-window
  :ensure t
  :init
  (progn
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
  '(aw-leading-char-face
  ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ))
  (setq aw-keys '(?a ?s ?w ?d ?e ?k ?l ?i ?o))

#+end_src
** Avy
#+begin_src emacs-lisp

  ;;avy package
  (use-package avy
    :ensure t
    :bind ("M-:" . avy-goto-char))

#+end_src
** Auto-Complete
#+begin_src emacs-lisp
  
  ;; ;; auto-completion with the auto-complete package
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)
  ;;     ))
  
#+end_src

** Undo Tree
#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+end_src

** Company
#+begin_src emacs-lisp
  
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))
  
#+end_src

#+RESULTS:
: t


* Org Mode


** Better Font Faces

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set face for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))


  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

#+RESULTS:
: efs/org-font-setup

** Basic Config

#+begin_src emacs-lisp

    (defun efs/org-mode-setup()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . efs/org-mode-setup)
      :config
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/.emacs.d/Agenda/tasks.org"
            "~/.emacs.d/Agenda/birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))

    ;; set the refile targets
    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; after refile, give advice to save all the org buffers
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; org-mode available tags
    (setq org-tag-alist
          '((:startgroup)
            ;;Put mutually exlusive tags here
            (:endgroup)
            ("@errand" . ?F)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("idea" . ?i)
            ("recurring" . ?r)
            ("bugs" . ?b)
            ("new features" . ?f)))

    (setq org-capture-templates
          '(("t" "Tasks / Projects")
             ("tt" "Task" entry (file+olp "~/.emacs.d/Agenda/tasks.org" "Inbox")
               "* TODO %?\n  %T\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Documents/Code/OrgMode/Agenda/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (org-capture nil jj) |

** Org Allert
#+begin_src emacs-lisp

   ;; (use-package org-alert
  ;;    :ensure t
  ;;    :custom (alert-default-style 'notifications)
  ;;    :config
  ;;    (setq org-alert-interval 300
  ;;          org-alert-notification-title "Org Alert Reminder!")
  ;;    (org-alert-enable))

;;   (use-package org
;;        :ensure org-plus-contrib)

;;      (use-package org-notify
;;        :ensure nil
;;        :after org
;;        :config
;;        (org-notify-start)
;;        (org-notify-add
;;         'default
;;         '(:time "10m" :period: "5s" :duration 100  :actions -notify)))


#+end_src

#+RESULTS:
: t

** Nicer Heading Bullets

#+begin_src emacs-lisp

   (use-package org-bullets
        :after org
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

#+RESULTS:
| org-bullets-mode | efs/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Center Org Buffers

#+begin_src emacs-lisp

  ;; To center text on screen and have a text width of 100 caracters
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

#+RESULTS:
| efs/org-mode-visual-fill | org-bullets-mode | efs/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  ;; Structure Templates
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "/home/k13353/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'efs/org-babel-tangle-config)))

#+end_src

#+RESULTS:


* Development


** Languages
***  Language Servers
#+begin_src emacs-lisp
  
  (use-package lsp-mode
    :hook
    ((python-mode . lsp)))  
  
  (use-package lsp-ui
    :commands lsp-ui-mode)
  
#+end_src

#+RESULTS:
*** Python
#+begin_src emacs-lisp
  
(use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
  
#+end_src

#+RESULTS:
: t
*** C++
#+begin_src emacs-lisp
  
  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "ccls"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure))
  
#+end_src

#+RESULTS:
: t

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/Code")
      (setq projectile-project-search-path '("~/Documents/Code")))
    (setq projectile-switch-project-action 'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

#+RESULTS:
: t

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)))

#+end_src

#+RESULTS:

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Terminal
#+begin_src emacs-lisp

  ;; Use vterm
  (use-package vterm
      :ensure t)
  (global-set-key (kbd "<f8>") 'vterm)

#+end_src

** Python
#+begin_src emacs-lisp
  
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :init
  ;;   (elpy-enable))
  
  ;; ;; flycheck
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode t))
  
  ;; (use-package jedi
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (add-hook 'python-mode-hook 'jedi:ac-setup))
  
#+end_src
** Yasnippet
#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

#+end_src


* Application


** Some App

#+begin_src conf-unix :tangle .config/some-app/config :mkdirp yes
  value = 42 
#+end_src


* Noweb Blocks

Enables you to pass variables ito a source block!

#+NAME: the-value
#+begin_src emacs-lisp
55
#+end_src

#+RESULTS: the-value
: 55

#+NAME: the-second-value
#+begin_src emacs-lisp
(+ 55 39)
#+end_src

#+begin_src conf-unix :tangle .config/some-app/config :noweb yes

  value2 = <<the-value>>
  value3 = <<the-second-value()>>

#+end_src






