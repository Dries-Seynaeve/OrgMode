#+STARTIP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhitbit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

#+RESULTS:
: revert-buffer

* Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* whick key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
     :ensure t
     :config
     (which-key-mode))
  #+END_SRC
* Moe-Dark theme
Loads the theme
#+BEGIN_SRC emacs-lisp
(load-theme 'moe-dark t)
#+END_SRC

#+RESULTS:
: t

* Org mode settings
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
;; Use ibuffer
(defalias 'list-buffers 'ibuffer)

#+END_SRC

* Ace Window for easy buffer switching
#+BEGIN_SRC emacs-lisp
;; set up ace-window
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
(setq aw-keys '(?a ?s ?w ?d ?e ?k ?l ?i ?o))
#+END_SRC

* Terminal settings
#+BEGIN_SRC emacs-lisp
;; Use vterm
(use-package vterm
  :ensure t)
#+END_SRC

* Swiper / Ivy / Counsel 
#+BEGIN_SRC emacs-lisp
;; We need to to have counsil in order to for swiper to work
(use-package counsel
  :ensure t)

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* Avy - navigate by searching for a letter on the screen and jump to it
#+BEGIN_SRC emacs-lisp
;;avy package
(use-package avy
  :ensure t
  :bind ("M-:" . avy-goto-char))
#+END_SRC
* Auto-Complete
#+BEGIN_SRC emacs-lisp
;; auto-completion with the auto-complete package
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

#+RESULTS:

* Reveal.js
#+begin_src emacs-lisp
   (use-package ox-reveal
   :ensure ox-reveal)

   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)

   (use-package htmlize
   :ensure t)
#+end_src
* Python Packages
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
;; flycheck
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src
* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+end_src
#+RESULTS: 
* C++ Integragtion
#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t)
#+end_src

#+RESULTS:
: t

* Git integration using Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)))
#+end_src

#+RESULTS:
