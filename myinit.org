

* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhitbit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (menu-bar-mode -1)

  ;; Set up the visible bel
  (setq visible-bell t)

  ;; Font Configuration ----------------------------------------------------------
  ;;(use-package fira-code-mode
  ;;  :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
  ;;  :hook prog-mode)     


  (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 140 :weight 'regular)
#+END_SRC

* LineNumbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;;Disable line numbers for some nodes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC
#+RESULTS:
: revert-buffer

* Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* whick key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
     :ensure t
     :config
     (which-key-mode))
  #+END_SRC
* Load theme
Loads the theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes)
  (load-theme 'doom-palenight t)
#+END_SRC

#+RESULTS:
: t

* Org mode settings
#+BEGIN_SRC emacs-lisp
    (defun efs/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1)
      (setq evil-auto-indent nil))


    (use-package org
      :hook (org-mode . efs/org-mode-setup)
      :config
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t))

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/.emacs.d/Agenda/tasks.org"
          "~/.emacs.d/Agenda/birthdays.org"))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k)")))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ;; Replace list hyphen with dot

      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set face for heading levels

      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))


      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; To center text on screen and have a text width of 100 caracters
    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill))

  ;; org-mode available tags
  (setq org-tag-alist
        '((:startgroup)
        ;Put mutually exlusive tags here
          (:endgroup)
          ("@errand" . ?F)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("idea" . ?i)
          ("recurring" . ?r)
          ("bugs" . ?b)
          ("new features" . ?f)))
#+END_SRC
* Refile
#+begin_src emacs-lisp
  ;; set the refile targets
  (setq org-refile-targets
        '(("archive.org" :maxlevel . 1)
          ("tasks.org" :maxlevel . 1)))
  ;; after refile, give advice to save all the org buffers
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
* Org Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Documents/Code/OrgMode/Agenda/tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Documents/Code/OrgMode/Agenda/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Documents/Code/OrgMode/Agenda/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))
#+end_src 
* ibuffer
#+BEGIN_SRC emacs-lisp
;; Use ibuffer
(defalias 'list-buffers 'ibuffer)

#+END_SRC

* Ace Window for easy buffer switching
#+BEGIN_SRC emacs-lisp
;; set up ace-window
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
(setq aw-keys '(?a ?s ?w ?d ?e ?k ?l ?i ?o))
#+END_SRC

* Terminal settings
#+BEGIN_SRC emacs-lisp
  ;; Use vterm
  (use-package vterm
    :ensure t)
  (global-set-key (kbd "<f8>") 'vterm)
#+END_SRC

* Swiper / Ivy / Counsel 
#+BEGIN_SRC emacs-lisp
      ;; We need to to have counsil in order to for swiper to work
      (use-package counsel
	:ensure t
	:bind (:map minibuffer-local-map
		("C-r" . 'counsel-minibuffer-history)))

      (use-package swiper
	:ensure try
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (global-set-key "\C-s" 'swiper)
	  (global-set-key (kbd "C-c C-r") 'ivy-resume)
	  (global-set-key (kbd "<f6>") 'ivy-resume)
	  (global-set-key (kbd "C-x b") 'counsel-ibuffer)
	  (global-set-key (kbd "M-x") 'counsel-M-x)
	  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	  (global-set-key (kbd "<f1> l") 'counsel-load-library)
	  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	  (global-set-key (kbd "C-c k") 'counsel-ag)
	  (global-set-key (kbd "C-x l") 'counsel-locate)
	  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))

    ;; Ivy Rich
  (use-package ivy-rich
    :init
     (ivy-rich-mode 1))
#+END_SRC

* Avy - navigate by searching for a letter on the screen and jump to it
#+BEGIN_SRC emacs-lisp
;;avy package
(use-package avy
  :ensure t
  :bind ("M-:" . avy-goto-char))
#+END_SRC
* Auto-Complete
#+BEGIN_SRC emacs-lisp
;; auto-completion with the auto-complete package
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

#+RESULTS:

* Reveal.js
#+begin_src emacs-lisp
   (use-package ox-reveal
   :ensure ox-reveal)

   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)

   (use-package htmlize
   :ensure t)
#+end_src
* Python Packages
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
;; flycheck
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src
* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+end_src
#+RESULTS: 
* C++ Integragtion
#+begin_src emacs-lisp

#+end_src

#+RESULTS:
: t

* Git integration using Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)))


#+end_src

#+RESULTS:

* Doom mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))
#+end_src

* Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/Code")
      (setq projectile-project-search-path '("~/Documents/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
* Unde Tree
 #+begin_src emacs-lisp
   (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
 #+end_src

 #+RESULTS:
